'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = wiki;

require('babel-polyfill');

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _util = require('./util');

var _page = require('./page');

var _page2 = _interopRequireDefault(_page);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace
 * @constant
 * @property {string} apiUrl - URL of Wikipedia API
 */
var defaultOptions = {
	apiUrl: 'http://en.wikipedia.org/w/api.php'
};

/**
 * wiki
 * @example
 * wiki({ apiUrl: 'http://fr.wikipedia.org/w/api.php' }).search(...);
 * @namespace Wiki
 * @param  {Object} options
 * @return {Object} - wiki (for chaining methods)
*/
function wiki() {
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];


	if (this instanceof wiki) {
		console.log('Please do not use wikijs ^1.0.0 as a class. Please see the new README.'); // eslint-disable-line
	}

	var apiOptions = Object.assign({}, defaultOptions, options);

	function handleRedirect(res) {
		if (res.query.redirects && res.query.redirects.length === 1) {
			return (0, _util.api)(apiOptions, {
				prop: 'info|pageprops',
				inprop: 'url',
				ppprop: 'disambiguation',
				titles: res.query.redirects[0].to
			});
		}
		return res;
	}

	/**
  * Search articles
  * @example
  * wiki.search('star wars').then(data => console.log(data.results.length));
  * @example
  * wiki.search('star wars').then(data => {
  * 	data.next().then(...);
  * });
  * @method Wiki#search
  * @param  {string} query - keyword query
  * @param  {Number} [limit] - limits the number of results
  * @return {Promise} - pagination promise with results and next page function
  */
	function search(query) {
		var limit = arguments.length <= 1 || arguments[1] === undefined ? 50 : arguments[1];

		return (0, _util.pagination)(apiOptions, {
			list: 'search',
			srsearch: query,
			srlimit: limit
		}, function (res) {
			return _underscore2.default.pluck(res.query.search, 'title');
		});
	}

	/**
  * Random articles
  * @example
  * wiki.random(3).then(results => console.log(results[0]));
  * @method Wiki#random
  * @param  {Number} [limit] - limits the number of random articles
  * @return {Promise} - List of page titles
  */
	function random() {
		var limit = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

		return (0, _util.api)(apiOptions, {
			list: 'random',
			rnnamespace: 0,
			rnlimit: limit
		}).then(function (res) {
			return _underscore2.default.pluck(res.query.random, 'title');
		});
	}

	/**
  * Get Page
  * @example
  * wiki.page('Batman').then(page => console.log(page.pageid));
  * @method Wiki#page
  * @param  {string} title - title of article
  * @return {Promise}
  */
	function page(title) {
		return (0, _util.api)(apiOptions, {
			prop: 'info|pageprops',
			inprop: 'url',
			ppprop: 'disambiguation',
			titles: title
		}).then(handleRedirect).then(function (res) {
			var id = Object.keys(res.query.pages)[0];
			if (!id) {
				throw new Error('No article found');
			}
			return (0, _page2.default)(res.query.pages[id], apiOptions);
		});
	}

	/**
  * Geographical Search
  * @example
  * wiki.geoSearch(32.329, -96.136).then(titles => console.log(titles.length));
  * @method Wiki#geoSearch
  * @param  {Number} lat - latitude
  * @param  {Number} lon - longitude
  * @param  {Number} [radius=1000] - search radius in kilometers (default: 1km)
  * @return {Promise} - List of page titles
  */
	function geoSearch(lat, lon) {
		var radius = arguments.length <= 2 || arguments[2] === undefined ? 1000 : arguments[2];

		return (0, _util.api)(apiOptions, {
			list: 'geosearch',
			gsradius: radius,
			gscoord: lat + '|' + lon
		}).then(function (res) {
			return _underscore2.default.pluck(res.query.geosearch, 'title');
		});
	}

	return {
		search: search,
		random: random,
		page: page,
		geoSearch: geoSearch,
		options: options
	};
}
//# sourceMappingURL=data:application/json;base64,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TUE7O0FBRUQsUUFBTztBQUNOLGdCQURNO0FBRU4sZ0JBRk07QUFHTixZQUhNO0FBSU4sc0JBSk07QUFLTjtBQUxNLEVBQVA7QUFPQSIsImZpbGUiOiJ3aWtpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHsgcGFnaW5hdGlvbiwgYXBpIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB3aWtpUGFnZSBmcm9tICcuL3BhZ2UnO1xuXG4vKipcbiAqIEBuYW1lc3BhY2VcbiAqIEBjb25zdGFudFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFwaVVybCAtIFVSTCBvZiBXaWtpcGVkaWEgQVBJXG4gKi9cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuXHRhcGlVcmw6ICdodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHAnXG59O1xuXG4vKipcbiAqIHdpa2lcbiAqIEBleGFtcGxlXG4gKiB3aWtpKHsgYXBpVXJsOiAnaHR0cDovL2ZyLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwJyB9KS5zZWFyY2goLi4uKTtcbiAqIEBuYW1lc3BhY2UgV2lraVxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IC0gd2lraSAoZm9yIGNoYWluaW5nIG1ldGhvZHMpXG4qL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2lraShvcHRpb25zID0ge30pIHtcblxuXHRpZiAodGhpcyBpbnN0YW5jZW9mIHdpa2kpIHtcblx0XHRjb25zb2xlLmxvZygnUGxlYXNlIGRvIG5vdCB1c2Ugd2lraWpzIF4xLjAuMCBhcyBhIGNsYXNzLiBQbGVhc2Ugc2VlIHRoZSBuZXcgUkVBRE1FLicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdH1cblxuXHRjb25zdCBhcGlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVJlZGlyZWN0KHJlcykge1xuICAgIGlmIChyZXMucXVlcnkucmVkaXJlY3RzICYmIHJlcy5xdWVyeS5yZWRpcmVjdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gYXBpKGFwaU9wdGlvbnMsIHtcblx0XHRcdFx0cHJvcDogJ2luZm98cGFnZXByb3BzJyxcblx0XHRcdFx0aW5wcm9wOiAndXJsJyxcblx0XHRcdFx0cHBwcm9wOiAnZGlzYW1iaWd1YXRpb24nLFxuXHRcdFx0XHR0aXRsZXM6IHJlcy5xdWVyeS5yZWRpcmVjdHNbMF0udG9cblx0XHRcdH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cblx0LyoqXG5cdCAqIFNlYXJjaCBhcnRpY2xlc1xuXHQgKiBAZXhhbXBsZVxuXHQgKiB3aWtpLnNlYXJjaCgnc3RhciB3YXJzJykudGhlbihkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEucmVzdWx0cy5sZW5ndGgpKTtcblx0ICogQGV4YW1wbGVcblx0ICogd2lraS5zZWFyY2goJ3N0YXIgd2FycycpLnRoZW4oZGF0YSA9PiB7XG5cdCAqIFx0ZGF0YS5uZXh0KCkudGhlbiguLi4pO1xuXHQgKiB9KTtcblx0ICogQG1ldGhvZCBXaWtpI3NlYXJjaFxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHF1ZXJ5IC0ga2V5d29yZCBxdWVyeVxuXHQgKiBAcGFyYW0gIHtOdW1iZXJ9IFtsaW1pdF0gLSBsaW1pdHMgdGhlIG51bWJlciBvZiByZXN1bHRzXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IC0gcGFnaW5hdGlvbiBwcm9taXNlIHdpdGggcmVzdWx0cyBhbmQgbmV4dCBwYWdlIGZ1bmN0aW9uXG5cdCAqL1xuXHRmdW5jdGlvbiBzZWFyY2gocXVlcnksIGxpbWl0ID0gNTApIHtcblx0XHRyZXR1cm4gcGFnaW5hdGlvbihhcGlPcHRpb25zLCB7XG5cdFx0XHRsaXN0OiAnc2VhcmNoJyxcblx0XHRcdHNyc2VhcmNoOiBxdWVyeSxcblx0XHRcdHNybGltaXQ6IGxpbWl0XG5cdFx0fSwgcmVzID0+IF8ucGx1Y2socmVzLnF1ZXJ5LnNlYXJjaCwgJ3RpdGxlJykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJhbmRvbSBhcnRpY2xlc1xuXHQgKiBAZXhhbXBsZVxuXHQgKiB3aWtpLnJhbmRvbSgzKS50aGVuKHJlc3VsdHMgPT4gY29uc29sZS5sb2cocmVzdWx0c1swXSkpO1xuXHQgKiBAbWV0aG9kIFdpa2kjcmFuZG9tXG5cdCAqIEBwYXJhbSAge051bWJlcn0gW2xpbWl0XSAtIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJhbmRvbSBhcnRpY2xlc1xuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSAtIExpc3Qgb2YgcGFnZSB0aXRsZXNcblx0ICovXG5cdGZ1bmN0aW9uIHJhbmRvbShsaW1pdCA9IDEpIHtcblx0XHRyZXR1cm4gYXBpKGFwaU9wdGlvbnMsIHtcblx0XHRcdFx0bGlzdDogJ3JhbmRvbScsXG5cdFx0XHRcdHJubmFtZXNwYWNlOiAwLFxuXHRcdFx0XHRybmxpbWl0OiBsaW1pdFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKHJlcyA9PiBfLnBsdWNrKHJlcy5xdWVyeS5yYW5kb20sICd0aXRsZScpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgUGFnZVxuXHQgKiBAZXhhbXBsZVxuXHQgKiB3aWtpLnBhZ2UoJ0JhdG1hbicpLnRoZW4ocGFnZSA9PiBjb25zb2xlLmxvZyhwYWdlLnBhZ2VpZCkpO1xuXHQgKiBAbWV0aG9kIFdpa2kjcGFnZVxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IHRpdGxlIC0gdGl0bGUgb2YgYXJ0aWNsZVxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfVxuXHQgKi9cblx0ZnVuY3Rpb24gcGFnZSh0aXRsZSkge1xuXHRcdHJldHVybiBhcGkoYXBpT3B0aW9ucywge1xuXHRcdFx0XHRwcm9wOiAnaW5mb3xwYWdlcHJvcHMnLFxuXHRcdFx0XHRpbnByb3A6ICd1cmwnLFxuXHRcdFx0XHRwcHByb3A6ICdkaXNhbWJpZ3VhdGlvbicsXG5cdFx0XHRcdHRpdGxlczogdGl0bGVcblx0XHRcdH0pXG4gICAgICAudGhlbihoYW5kbGVSZWRpcmVjdClcblx0XHRcdC50aGVuKHJlcyA9PiB7XG5cdFx0XHRcdGNvbnN0IGlkID0gT2JqZWN0LmtleXMocmVzLnF1ZXJ5LnBhZ2VzKVswXTtcblx0XHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignTm8gYXJ0aWNsZSBmb3VuZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB3aWtpUGFnZShyZXMucXVlcnkucGFnZXNbaWRdLCBhcGlPcHRpb25zKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdlb2dyYXBoaWNhbCBTZWFyY2hcblx0ICogQGV4YW1wbGVcblx0ICogd2lraS5nZW9TZWFyY2goMzIuMzI5LCAtOTYuMTM2KS50aGVuKHRpdGxlcyA9PiBjb25zb2xlLmxvZyh0aXRsZXMubGVuZ3RoKSk7XG5cdCAqIEBtZXRob2QgV2lraSNnZW9TZWFyY2hcblx0ICogQHBhcmFtICB7TnVtYmVyfSBsYXQgLSBsYXRpdHVkZVxuXHQgKiBAcGFyYW0gIHtOdW1iZXJ9IGxvbiAtIGxvbmdpdHVkZVxuXHQgKiBAcGFyYW0gIHtOdW1iZXJ9IFtyYWRpdXM9MTAwMF0gLSBzZWFyY2ggcmFkaXVzIGluIGtpbG9tZXRlcnMgKGRlZmF1bHQ6IDFrbSlcblx0ICogQHJldHVybiB7UHJvbWlzZX0gLSBMaXN0IG9mIHBhZ2UgdGl0bGVzXG5cdCAqL1xuXHRmdW5jdGlvbiBnZW9TZWFyY2gobGF0LCBsb24sIHJhZGl1cyA9IDEwMDApIHtcblx0XHRyZXR1cm4gYXBpKGFwaU9wdGlvbnMsIHtcblx0XHRcdFx0bGlzdDogJ2dlb3NlYXJjaCcsXG5cdFx0XHRcdGdzcmFkaXVzOiByYWRpdXMsXG5cdFx0XHRcdGdzY29vcmQ6IGAke2xhdH18JHtsb259YFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKHJlcyA9PiBfLnBsdWNrKHJlcy5xdWVyeS5nZW9zZWFyY2gsICd0aXRsZScpKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2VhcmNoLFxuXHRcdHJhbmRvbSxcblx0XHRwYWdlLFxuXHRcdGdlb1NlYXJjaCxcblx0XHRvcHRpb25zXG5cdH07XG59XG4iXX0=